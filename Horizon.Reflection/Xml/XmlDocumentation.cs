using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;

namespace Horizon.Reflection
{
    /// <summary>
    /// Represents the generated XML document from C# code.
    /// </summary>
    internal sealed class XmlDocumentation
    {
        /// <summary>
        /// Members of this XML document.
        /// </summary>
        private readonly IReadOnlyDictionary<string, XmlMember> _members;

        /// <summary>
        /// Creates a new instance of <see cref="XmlDocumentation"/>
        /// </summary>
        /// <param name="assembly">Documented assembly.</param>
        internal XmlDocumentation(Assembly assembly)
        {
            _members = GetMemberNodes(LoadXmlDocument(assembly)).ToDictionary(memberNode => memberNode.Name, memberNode => memberNode);
        }

        /// <summary>
        /// Loads the <see cref="XmlDocument"/> generated by the specified <see cref="Assembly"/>, if it exists.
        /// </summary>
        /// <param name="assembly">Documented assembly.</param>
        /// <returns>XML document.</returns>
        private static XmlDocument LoadXmlDocument(Assembly assembly)
        {
            const string prefix = "file:///";

            var codeBase = assembly.CodeBase;

            if (!codeBase.StartsWith(prefix)) return null;

            try
            {
                var xmlDocument = new XmlDocument();

                using (var streamReader = new StreamReader(Path.ChangeExtension(codeBase.Substring(prefix.Length), ".xml")))
                {
                    xmlDocument.Load(streamReader);
                }

                return xmlDocument;
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the member nodes from the specified <see cref="XmlDocument"/>.
        /// </summary>
        /// <param name="xmlDocument">XML document.</param>
        /// <returns>An enumeration of all <see cref="XmlMember"/> nodes.</returns>
        private static IEnumerable<XmlMember> GetMemberNodes(XmlNode xmlDocument)
        {
            IEnumerable<XmlElement> elements;

            try
            {
                elements = xmlDocument["doc"]["members"].Cast<XmlElement>();
            }
            catch (Exception)
            {
                elements = Enumerable.Empty<XmlElement>();
            }

            foreach (var xmlElement in elements)
            {
                yield return new XmlMember(xmlElement);
            }
        }

        internal string GetSummary<TMemberData>(TMemberData memberData) where TMemberData : MemberData
        {
            switch (memberData)
            {
                case TypeData type:
                {
                    return _members.TryGetValue($"T:{type.Path}", out var member) ? member.Summary : null;
                }
                case PropertyData property:
                {
                    return _members.TryGetValue($"P:{property.Path}", out var member) ? member.Summary : null;
                }
                case FieldData field:
                {
                    return _members.TryGetValue($"F:{field.Path}", out var member) ? member.Summary : null;
                }
                case MethodBaseData method:
                {
                    return GetMethodMember(method)?.Summary;
                }
                case ParameterData parameter:
                {
                    var member = GetMethodMember(parameter.DeclaringMethod);

                    return member == null ? null : GetMethodMember(parameter.DeclaringMethod).Parameters.TryGetValue(parameter.Name, out var summary) ? summary : null;
                }
                default:
                {
                    return null;
                }
            }

            XmlMember GetMethodMember(MethodBaseData method)
            {
                var key = $"M:{method.Path}{(method.Parameters.Count == 0 ? string.Empty : $"({string.Join(",", method.Parameters.Select(parameter => parameter.ParameterType.Path))})")}";
                return _members.TryGetValue(key, out var member) ? member : null;
            }
        }
    }
}